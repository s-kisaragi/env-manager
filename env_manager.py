import os
import sys
import boto3
import click
from datetime import datetime


def get_ssm_client():
    try:
        return boto3.client('ssm')
    except Exception as e:
        click.echo(click.style("AWS Credentials error: {} Please check your AWS credentials.".format(str(e)), fg='red'))
        click.echo("Run AWS CLI 'aws configure' to set up your credentials.")
        sys.exit(1)

def parse_env_file(file_path):
    if not os.path.exists(file_path):
        click.echo(click.style("Error: {} not found".format(file_path), fg='red'))
        return None
    
    env_vars = {}
    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line and not line.startswith('#'):
                if '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    
    return env_vars

def write_env_file(file_path, env_vars, project_name):
    with open(file_path, 'w') as file:
        file.write(f"# Generated by AWS .env Manager\n")
        file.write(f"# Project: {project_name}\n")
        file.write(f"# Generated at: {datetime.now().isoformat()}\n\n")
        
        for key, value in env_vars.items():
            file.write(f"{key}={value}\n")

def get_all_parameters_by_path(ssm, path, with_decryption=False):
    """Get all parameters from parameter store (with pagination)"""
    parameters = []
    paginator = ssm.get_paginator('get_parameters_by_path')
    
    operation_parameters = {
        'Path': path,
        'Recursive': True,
        'WithDecryption': with_decryption
    }
    
    for page in paginator.paginate(**operation_parameters):
        parameters.extend(page.get('Parameters', []))
    
    return parameters

@click.group()
def cli():
    """AWS .env Manager - Multi-project .env management tool"""
    pass

@cli.command()
@click.argument('project_name')
def push(project_name):
    """Upload local .env file to AWS"""
    ssm = get_ssm_client()
    
    env_path = os.path.join(os.getcwd(), '.env')
    
    env_vars = parse_env_file(env_path)
    if not env_vars:
        return
    
    click.echo(f"Project {click.style(project_name, fg='cyan')} environment variables are being uploaded to AWS...")
    
    for key, value in env_vars.items():
        param_name = f"/env/{project_name}/{key}"
        try:
            ssm.put_parameter(
                Name=param_name,
                Value=value,
                Type='SecureString',
                Overwrite=True
            )
            click.echo(f"  {click.style('✓', fg='green')} {key} uploaded")
        except Exception as e:
            click.echo(click.style(f"  ✗ {key} upload failed: {str(e)}", fg='red'))
        click.echo(click.style(f"\n ✅ Project {project_name} environment variables saved to AWS successfully!", fg='green'))

@cli.command()
@click.argument('project_name')
def pull(project_name):
    """Get environment variables from AWS and save to local .env file"""
    ssm = get_ssm_client()
    
    click.echo(f"Project {click.style(project_name, fg='cyan')} environment variables are being fetched from AWS...")
    
    parameters = get_all_parameters_by_path(
        ssm, 
        f"/env/{project_name}/", 
        True
    )
    
    if not parameters:
        click.echo(click.style(f"Error: Project {project_name} environment variables not found", fg='red'))
        return
    
    env_vars = {}
    for param in parameters:
        key = param['Name'].split('/')[-1]
        env_vars[key] = param['Value']
    
    env_path = os.path.join(os.getcwd(), '.env')
    write_env_file(env_path, env_vars, project_name)
    
    click.echo(click.style(f"\n✅ Project {project_name} environment variables ({len(env_vars)} variables) saved to .env file successfully!", fg='green'))

@cli.command()
def list():
    """List registered projects"""
    ssm = get_ssm_client()
    
    click.echo(click.style("Registered Projects:", fg='cyan'))
    
    parameters = get_all_parameters_by_path(ssm, '/env/')
    
    projects = set()
    for param in parameters:
        path_parts = param['Name'].split('/')
        if len(path_parts) >= 3:
            projects.add(path_parts[2])
    
    if not projects:
        click.echo(click.style("  No registered projects found", fg='yellow'))
        return
    
    for project in sorted(projects):
        try:
            project_parameters = get_all_parameters_by_path(ssm, f"/env/{project}/")
            var_count = len(project_parameters)
            click.echo(f"  {click.style('•', fg='green')} {project} ({var_count} variables)")
        except Exception as e:
            click.echo(f"  {click.style('•', fg='yellow')} {project} (Error: {str(e)})")

@cli.command()
@click.argument('project_name')
@click.confirmation_option(prompt='Are you sure you want to delete all environment variables for this project?')
def delete(project_name):
    """Delete project environment variables"""
    ssm = get_ssm_client()
    
    click.echo(f"Deleting all environment variables for project {click.style(project_name, fg='cyan')}...")
    
    parameters = get_all_parameters_by_path(ssm, f"/env/{project_name}/")
    
    if not parameters:
        click.echo(click.style(f"Error: Project {project_name} environment variables not found", fg='red'))
        return
    
    for param in parameters:
        try:
            ssm.delete_parameter(Name=param['Name'])
            key = param['Name'].split('/')[-1]
            click.echo(f"  {click.style('✓', fg='yellow')} {key} deleted")
        except Exception as e:
            click.echo(click.style(f"  ✗ {param['Name']} deletion failed: {str(e)}", fg='red'))
    
    click.echo(click.style(f"\n✅ Project {project_name} environment variables ({len(parameters)} variables) deleted successfully!", fg='green'))

if __name__ == '__main__':
    cli()